---@diagnostic disable: deprecated

-- Библиотека table состоит из вспомогательных функций для работы с
-- таблицами КАК С МАССИВАМИ. Она предоставляет функции для вставки и
-- удаления элементов из списков, для сортировки элементов массива и для
-- конкатенации всех строк в массиве.

-- for k in pairs(table) do print(k) end
-- Все что есть в table:

-- maxn --> возвращает наибольший числовой индекс таблицы t
-- insert --> всвтавка элемента в массив (2 варианта, описано ниже)
-- remove --> удаление из массива (2 варианта, описано ниже)
-- move --> копирует элементы из таблицы a1 в таблицу a2 в заданном диапазоне
-- concat --> берет список строк и возвращает результат конкатенации всех этих строк
-- sort --> сортировка (описано ниже)

-- ДАЛЕЕ УСТАРЕВШИЕ (DEPRECATED) ФУНКЦИИ ИЗ table
-- foreachi --> применяет функцию f к каждому элементу массива t с числовыми индексами по порядку
-- foreach --> применяет функцию f ко всем парам ключ-значение в таблице t (в произвольном порядке)
-- getn --> Возвращает длину массива t (аналог #t).

-- Функция table.insert вставляет элемент в заданную позицию
-- массива, отодвигая остальные элементы, чтобы освободить место.

local t = {1, 2, 3}
table.insert(t, 2, 10)
print(table.concat(t, ", ")) -- 1, 10, 2, 3

-- table.insert без указания позиции вставляет в конец

local t = {1, 2, 3}
table.insert(t, 10)
print(table.concat(t, ", ")) -- 1, 2, 3, 10

-- Функция table.remove удаляет (и возвращает) элемент с заданной
-- позиции массива, при этом сдвигая остальные элементы, чтобы занять
-- его место. При вызове без указания позиции она удаляет последний
-- элемент массива.

local t = {1, 2, 3}
print(table.remove(t, 2)) -- 2
print(table.concat(t, ", ")) -- 1, 3

-- table.remove без указания позиции удаляет последний элемент

local t = {1, 2, 3}
print(table.remove(t)) -- 3
print(table.concat(t, ", ")) -- 1, 2


-- Еще одной полезной функцией для массивов является table.sort; мы
-- уже видели ее прежде. Она принимает массив и необязательную
-- функцию упорядочения. Эта функция принимает два аргумента и
-- должна вернуть true, когда ее первый аргумент должен идти перед
-- вторым в отсортированном массиве. Если эта функция не
-- предоставлена, sort по умолчанию использует сравнение «меньше, чем»
-- (соответствующее операции '<').

-- функция принимает таблицу и функцию сравнения
-- Функция сравнения должна возвращать:
-- true (истину), если элемент a должен стоять перед элементом b в отсортированном массиве 
-- (индекс элемента a в отсортированном массиве должен быть меньше индекса элемента b)
-- false (ложь) в противном случае

-- сортировка строк по возрастанию длин
t = {"1234", "1", "123", "11", "1234"}
table.sort(t, function (a, b)
     return #a < #b
end)
print(table.concat(t, ", "))

-- table.concat
-- Она берет список строк (или того что может быть преобразовно в строки) и
-- возвращает результат конкатенации всех этих строк. Необязательный
-- второй аргумент задает разделитель строк, который вставляется между
-- строками из списка. Данная функция также принимает два других
-- необязательных аргумента, которые задают индексы первой и последней
-- конкатенируемых строк.

t = {1, 2, 3, 4, 5}
print(table.concat(t)) -- 12345
print(table.concat(t, ", ")) -- 1, 2, 3, 4, 5
print(table.concat(t, ", ", 3)) -- 3, 4, 5
print(table.concat(t, ", ", 2, 4)) -- 2, 3, 4

-- table.maxn
-- Возвращает наибольший числовой индекс таблицы t.
-- если не может такое найти то возвращает 0

local t = {[1] = "a", ["test"] = "b", [10] = "c"}
print(table.maxn(t)) -- 10
local t = {}
print(table.maxn(t)) -- 0


-- table.move
-- function table.move(a1: table, f: integer, e: integer, t: integer, a2?: table) -> a2: table
-- a1 - таблица из которой копирует
-- f - начальный индекс откуда копировать
-- e - конечный индекс
-- t - начальный индекс куда вставлять

-- при этом сдвига не происходит, т.е. старые элементы заменяются новыми:
local a1 = {10, 20, 30}
local a2 = {1,2,3,4,5,6}
table.move(a1, 1, 2, 2, a2)
print(table.concat(a2, ", ")) -- 1, 10, 20, 4, 5, 6

-- Deprecated
-- table.foreachi(t, f)
-- Применяет функцию f к каждому элементу массива t с числовыми индексами по порядку.

t = {"he","l","lo"}
table.foreachi(t, function (i, v)
    print(i, v)
end)
-- 1       he
-- 2       l
-- 3       lo


-- Deprecated
-- table.foreach(t, f)
-- Применяет функцию f ко всем парам ключ-значение в таблице t (в произвольном порядке).

local t = {x = 10, y = 20}
table.foreach(t, function(k, v)
    print(k, v)
end)
-- y       20
-- x       10

-- Пример замены foreachi/foreach:

-- -- Вместо table.foreachi(t, f):
-- for i, v in ipairs(t) do f(i, v) end

-- -- Вместо table.foreach(t, f):
-- for k, v in pairs(t) do f(k, v) end
