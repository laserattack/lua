-- Библиотека операционной системы включает в себя функции для
-- работы с файлами (не с потоками), получения текущих даты и времени и
-- другие средства, касающиеся операционной системы. Она определена в
-- таблице os. Переносимость Lua сказалась на этой библиотеке: поскольку
-- Lua написана на чистом ANSI С, то эта библиотека включает в себя
-- только функционально сть предоставляемую стандартом ANSI. Многие
-- средства ОС, такие как работа с директориями и сокетами, не входят в
-- этот стандарт, и поэтому данная библиотека их не предоставляет.
-- Существуют другие библиотеки Lua, не включенные в основную
-- поставку, которые обеспечивают расширенный доступ к ОС. Примеры
-- таких библиотек: posix, предоставляющая для Lua всю
-- функциональность стандарта POSIX.1, luasocket для работы с сетью и
-- LuaFileSystem для работы с директориями и атрибутами файлов.
-- Все, что предлагает данная библиотека _для работы с файлами_, — это
-- функции os.rename для изменения имени файла и os.remove для удаления
-- файла.

-- for k in pairs(os) do print(k) end
-- Все что есть в os:

-- execute --> Функция os.execute выполняет команду операционной системы; она эквивалентна функции system в С Первое
-- возвращаемое значение логическое: true означает окончание программы
-- без ошибок. Второе возвращаемое значение — это строка: "exit", если
-- программа завершилась нормально, и "signal", если она была прервана
-- сигналом. Третье возвращаемое значение — это статус возврата, если
-- программа завершилась нормально, или номер сигнала, если она
-- завершилась по сигналу.

-- rename --> переименование файла по пути к нему
-- tmpname --> создает временный файл и возвращает его путь (но не открывает его)
-- getenv --> возвращает значение указанной переменной окружения (print(os.getenv("HOME")) --> /home/serr)
-- exit --> завершение работы программы с числовым/булевым кодом
-- clock --> Возвращает количество секунд процессорного времени, затраченного на выполнение программы до момента вызова clock
-- date --> она преобразует число, обозначающее дату и время, обратно в какое-нибудь высокоуровневое представление (без аргументов - текущую unix метку)
-- time --> без аргументов возвр. текущее unix время, с аргументом в виде таблицы - unix время, соответствующее таблице
-- remove --> удаление файла по пути к нему
-- setlocale --> задает текущую локаль, используемую программой Lua
-- difftime --> вычисляет разницу между двумя временными метками в секундах

--       _       _       _   _                
--      | |     | |     | | (_)               
--    __| | __ _| |_ ___| |_ _ _ __ ___   ___ 
--   / _` |/ _` | __/ _ \ __| | '_ ` _ \ / _ \
--  | (_| | (_| | ||  __/ |_| | | | | | |  __/
--   \__,_|\__,_|\__\___|\__|_|_| |_| |_|\___|

-- time
print(os.time()) --> текущее unix время
-- Когда передается таблица - возвращает unix время соотв. таблице
-- year полный год
-- month 01—12 (месяц)
-- day 01—31 (день)
-- hour 00—23 (час)
-- min 00—59 (минута)sec 00—59 (секунда)
-- isdst логическое значение, true при переходе на летнее время
-- поля year, month, day - обязательные
print(os.time{year=1970, month=2, day=1, hour=0}) --> 2667600
print(os.time{year=1970, month=2, day=1, hour=0, min=0, sec=1}) --> 2667601

local t1 = os.time{year=1970, month=2, day=1, hour=0} --> 2667600
local t2 = os.time()
print(os.difftime(t2, t1)) -- 1751641339


-- date
-- %a сокращенное название дня недели (например, Wed)
-- %A полное название дня недели (например, Wednesday)
-- %b сокращенное название месяца (например, Sep)
-- %B полное название месяца (например, September)
-- %c дата и время (например, 09/16/98 23:48:10)
-- %d день месяца (16) [01–31]
-- %H час, используя 24-часовое время 23) [00–23]
-- %I час, используя 12-часовое время (11) [01–12]
-- %j день года (259) [001–366]
-- %M минута (48) [00–59]
-- %m месяц (09) [01–12]
-- %p либо "am", либо "pm"
-- %S секунда (10) [00–60]
-- %w день недели (3) [0–6 = Sunday–Saturday]
-- %x дата (например, 09/16/98)
-- %X время (например, 23:48:10)
-- %y сокращенный год из двух цифр (98) [00–99]
-- %Y полный год (1998)
-- %% символ '%'

print(os.date()) -- Mon Aug  4 14:49:48 2025
print(os.date("%a")) -- Mon
print(os.date("%x %X")) -- 08/04/25 14:52:50
print(os.date("%x %X", 2667601)) -- 02/01/70 00:00:01
print(os.date("%d/%m/%y")) -- 04/08/25