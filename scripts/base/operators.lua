
--  ░▒▓██████▓▒░░▒▓███████▓▒░░▒▓████████▓▒░▒▓███████▓▒░ ░▒▓██████▓▒░▒▓████████▓▒░▒▓██████▓▒░░▒▓███████▓▒░ ░▒▓███████▓▒░ 
-- ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░  ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░        
-- ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░  ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░        
-- ░▒▓█▓▒░░▒▓█▓▒░▒▓███████▓▒░░▒▓██████▓▒░ ░▒▓███████▓▒░░▒▓████████▓▒░ ░▒▓█▓▒░  ░▒▓█▓▒░░▒▓█▓▒░▒▓███████▓▒░ ░▒▓██████▓▒░  
-- ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░  ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░      ░▒▓█▓▒░ 
-- ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░  ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░      ░▒▓█▓▒░ 
--  ░▒▓██████▓▒░░▒▓█▓▒░      ░▒▓████████▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░   ░▒▓██████▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓███████▓▒░                                                                                                        

-- multiple assignment
local a, b = 10, 2
print(a, b) -- 10      2

-- Список переменных длиннее чем список значнеий 
local a, b, c = 0, 1
print(a, b, c) -- 0       1       nil
-- станет a = nil не смотря на то что a была инициализирована 
b, a = 1
print(b, a) -- 1       nil

-- Список значений длиннее чем список переменных
local a, b = 1, 2, 3
-- лишние значения просто отбросятся

--  ░▒▓██████▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓███████▓▒░░▒▓█▓▒░░▒▓█▓▒░░▒▓███████▓▒░ 
-- ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░        
-- ░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░        
-- ░▒▓█▓▒░      ░▒▓████████▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓███████▓▒░ ░▒▓██████▓▒░  
-- ░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░      ░▒▓█▓▒░ 
-- ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░      ░▒▓█▓▒░ 
--  ░▒▓██████▓▒░░▒▓█▓▒░░▒▓█▓▒░░▒▓██████▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓███████▓▒░  

-- Блок — это
-- тело управляющей структуры, тело функции или кусок кода (файл или
-- строка (в случае с автономным интерпретатором каждая введенная туда строка - блок), 
-- где переменная была объявлена)

-- функция - отдельный блок
function Main()
    -- блок с собственной областью видимости
    do
        local local_a = "hello" -- локальная переменная
        global_a = "hello" -- глобальная переменная (глобальные переменные можно создавать где угодно)
    end

    local local_b = ", sailor!"

    -- переменная local_a видна только в том блоке где определена
    print(local_a, local_b) -- nil       , sailor!
    print(global_a, local_b) -- hello   , sailor!
end

Main()

--  ░▒▓██████▓▒░ ░▒▓██████▓▒░░▒▓███████▓▒░▒▓████████▓▒░▒▓███████▓▒░ ░▒▓██████▓▒░░▒▓█▓▒░              ░▒▓███████▓▒░▒▓████████▓▒░▒▓███████▓▒░░▒▓█▓▒░░▒▓█▓▒░░▒▓██████▓▒░▒▓████████▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓███████▓▒░░▒▓████████▓▒░░▒▓███████▓▒░ 
-- ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░   ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░             ░▒▓█▓▒░         ░▒▓█▓▒░   ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░   ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░        
-- ░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░   ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░             ░▒▓█▓▒░         ░▒▓█▓▒░   ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░        ░▒▓█▓▒░   ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░        
-- ░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░   ░▒▓███████▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░              ░▒▓██████▓▒░   ░▒▓█▓▒░   ░▒▓███████▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░        ░▒▓█▓▒░   ░▒▓█▓▒░░▒▓█▓▒░▒▓███████▓▒░░▒▓██████▓▒░  ░▒▓██████▓▒░  
-- ░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░   ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░                    ░▒▓█▓▒░  ░▒▓█▓▒░   ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░        ░▒▓█▓▒░   ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░             ░▒▓█▓▒░ 
-- ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░   ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░                    ░▒▓█▓▒░  ░▒▓█▓▒░   ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░   ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░             ░▒▓█▓▒░ 
--  ░▒▓██████▓▒░ ░▒▓██████▓▒░░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░   ░▒▓█▓▒░░▒▓█▓▒░░▒▓██████▓▒░░▒▓████████▓▒░      ░▒▓███████▓▒░   ░▒▓█▓▒░   ░▒▓█▓▒░░▒▓█▓▒░░▒▓██████▓▒░ ░▒▓██████▓▒░  ░▒▓█▓▒░    ░▒▓██████▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓████████▓▒░▒▓███████▓▒░  

do
    local a = 1

    -- if ... then 
    if a == 1 then
        print("a == 1")
    end

    a = 2

    -- if ... then ... else
    if a == 1 then
        print("a == 1")
    else
        print("a != 1")
    end

    -- if ... then ... elseif ... then ... else
    if a == 1 then
        print("a == 1")
    elseif a == 2 then
        print("a == 2")
    else
        print("a != 1 and a != 2")
    end

    -- цикл while
    local arr, i, count = {1, 2, 3}, 1, 0
    while arr[i] do
        count = count + 1
        i = i + 1
    end
    print(count) -- 3

    -- repeat-until
    -- печатает первую непустую введенную строку
    -- гарантированно выполнится 1 раз
    -- аналог do...while из Си
    -- local line
    -- repeat
    --     line = io.read()
    -- until line ~= ""
    -- print(line)

    -- В отличие от многих других языков, в Lua условие входит в область
    -- видимости локальной переменной, объявленной внутри цикла
    local x = 10
    local sqr = x/2
    repeat
        sqr = (sqr + x/sqr)/2
        local error = math.abs(sqr^2 - x)
    until error < x/10000 -- local 'error' still visible here
    print(sqr) -- 3.1623194221509

    -- Числовой for
    local start = 1
    local stop = 10
    local step = 2
    for ind = start, stop, step do
        print(ind) -- 1,3,5,7,9
    end

    -- Если step опущено, то будет шаг будет единичный
    start = 1 -- начальное значение ind
    stop = 10 -- значение ind при котором выход из цикла
    for ind = start, stop do -- ind локальная, область видимости - цикл
        print(ind) -- 1,2,3,4,5,6,7,8,9,10
    end

    -- все три значнеия: start, stop, step вычисляются ОДИН РАЗ ПЕРЕД НАЧАЛОМ ЦИКЛА
    local len = function (a) return #a end
    local s = "12345"
    for _ = 1, len(s), 1 do -- len(s) ВЫЧИСЛИТСЯ 1 РАЗ ПЕРЕД НАЧАЛОМ ЦИКЛА
        print(s)
    end

    -- бесконечный for можно сделать с использованием math.huge
    print(math.huge) -- inf
    for i = 1, math.huge do
        if i == 5 then
            break
        end
    end

    local t = {"hi","he","hu","ha"}
    -- Общий for обходит все значения, возвращаемые итерирующей функцией    
    -- Этот пример использует pairs, удобную итерирующую функцию для
    -- перебора таблицы, предоставляемую базовой библиотекой Lua. На
    -- каждом шаге этого цикла k получает ключ, a v получает значение,
    -- связанное с этим ключом.
    for k, v in pairs(t) do print(k, v) end

    -- поддерживаются также операторы break, return, goto
    -- break прерывает ближайший внутренний цикл
    -- return возвращает результаты из функции, если они есть, или просто завершает ее
    -- goto передает выполнение программы соответствующей метке
    -- continue в Lua нет, но можно смоделировать с использованием goto
    
    -- синтаксис goto и метки
    goto label
    ::label::

end
