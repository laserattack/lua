---@diagnostic disable: undefined-global, lowercase-global

a = 1
print(-a) -- -1
-- print(+a) -- ошибка, унарного плюса в lua нет

-- некоторые приколы с остатком от деления
a = 4
print(a % 3) -- 1
print(a % 0.3) -- 0.1
print(a % 0.03) -- 0.01
print(a % 0.003) -- 0.00099999999999989

--  ░▒▓██████▓▒░ ░▒▓██████▓▒░░▒▓██████████████▓▒░░▒▓███████▓▒░ ░▒▓██████▓▒░░▒▓███████▓▒░░▒▓█▓▒░░▒▓███████▓▒░░▒▓██████▓▒░░▒▓███████▓▒░  
-- ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ 
-- ░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ 
-- ░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓███████▓▒░░▒▓████████▓▒░▒▓███████▓▒░░▒▓█▓▒░░▒▓██████▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ 
-- ░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ 
-- ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ 
--  ░▒▓██████▓▒░ ░▒▓██████▓▒░░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░▒▓███████▓▒░ ░▒▓██████▓▒░░▒▓█▓▒░░▒▓█▓▒░                                                                                                                       

a = 1
print(a == 1) -- true
print(a ~= 1) -- false (аналог != в других ЯП)

-- таблицы по сути являются указателями, так что

a = {}; a.x = 1; a.y = 0
b = {}; b.x = 1; b.y = 0
c = a
print(a == c) -- true (один адрес)
print(a == b) -- false (разны адреса)
print(a, c, b) -- что то типо table: 0x01dd4d6aa140   table: 0x01dd4d6aa140   table: 0x01dd4d6aa4a8

-- строки сравниваются лексикографичские

print("abc" > "abb") -- true
print("abc" < "abe") -- true

-- ░▒▓█▓▒░      ░▒▓██████▓▒░ ░▒▓██████▓▒░░▒▓█▓▒░░▒▓██████▓▒░  
-- ░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ 
-- ░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░▒▓█▓▒░        
-- ░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒▒▓███▓▒░▒▓█▓▒░▒▓█▓▒░        
-- ░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░▒▓█▓▒░        
-- ░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ 
-- ░▒▓████████▓▒░▒▓██████▓▒░ ░▒▓██████▓▒░░▒▓█▓▒░░▒▓██████▓▒░  

-- Операция and возвращает свой
-- первый аргумент, если он ложный, иначе она возвращает свой второй
-- аргумент. Операция or возвращает свой первый аргумент, если он не
-- ложный; иначе она возвращает свой второй аргумент

res = nil and 13
print(res) -- nil
res = 5 and 13
print(res) -- 13

res = false or 13
print(res) -- 13
res = 5 or 13
print(res) -- 5

-- Обе операции, and и or, используют сокращенное вычисление, то
-- есть они вычисляют свой второй операнд только при необходимости.
-- Сокращенное вычисление обеспечивает отсутствие ошибок во время
-- выполнения для выражений вроде (type(v) == "table" and v.tag ==
-- "h1"): Lua не будет пытаться вычислить v.tag, когда v не является
-- таблицей.

-- реализация тернарного оператора в lua
-- (a and b) or с эквивалентно a?b:c из C
-- например:

x = 20
y = 30
max = (x > y) and x or y

-- Если x < y:
-- (x > y) and x or y --> false and x or y --> false or y --> y

-- Если x >= y:
-- (x > y) and x or y --> true and x or y --> x or y --> x

print(max)

-- Еще одна полезная идиома: х=х or v (если x == nil, то x = v)

response = nil
response = response or "error"
print(response) -- error